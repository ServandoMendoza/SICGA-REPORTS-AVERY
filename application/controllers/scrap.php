<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

/**
 * Class Controller Scrap
 *
 * This controller get data feeded by csv file containg Scrap data,
 * to report Scrap PDCA Graph Reports. We are just reporting two machine
 * data: AG16 and AG30.
 *
 */

class Scrap extends CI_Controller {

    private $upload_file;

    function __construct()
    {
        parent::__construct();
        $this->load->library('utilities');
        $this->load->library('layout');
        $this->load->helper('cookie');
        $this->load->model('model_reason_code');
        $this->load->model('model_pdca_subarea');
        $this->load->model('model_pdca_scrap');
        $this->load->model('model_pdca_area');
    }

    /**
     *  Main page to build Scrap report.
     */

    public function index()
    {
        $this->layout->title('Avery - Report Tool');

        $data['id_area'] = 1;
        $data['date_now'] = date("Y-m-d");
        $scrap_machines = $this->model_pdca_scrap->get_machines($data['id_area']);
        $machine_cells = array();

        foreach ($scrap_machines as $value) {
            $machine_cells[$value['agc']][] = $value;
        }

        $data['machines'] = $machine_cells;
        $this->layout->view('scrap/scrap_index_view', $data);
    }

    /**
     * Import View Controller, we just load an .csv file with specific scrap generated by Avery
     * production line internal software.
     */

    public function import()
    {
        $this->layout->title('Avery - Report Tool');
        $data['error'] = "";
        $this->layout->view('scrap/scrap_import_view.php', $data);
    }

    /**
     * Post graph report, this process all report data.
     */
    public function graphReport()
    {
        $this->layout->title('Avery - Report Tool');

        $months = $this->input->post('month');
        $selected_year = $this->input->post('year');
        $start_month = (int)$this->input->post('start_month') + 1;
        $end_month = (int)$this->input->post('end_month') + 1;
        $metric_goal = $this->input->post('metric_goal');
        $problem_def = $this->input->post('problem_def');
        $study_reach = $this->input->post('study_reach');
        $area_inversion = $this->input->post('area_inversion');
        $sub_area_inversion = $this->input->post('sub_area_inv');
        $date_selected = $this->input->post('date');
        $members = $this->input->post('members');
        $actual = $this->input->post('actual');
        $ytd = $this->input->post('ytd');

        $ag16_machines = $this->input->post('AG16');
        $ag30_machines = $this->input->post('AG30');

        $month_names = array('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre',
            'Octubre', 'Noviembre', 'Diciembre');

        /*
         * Paso 1. Verificación de la Tendencia del Métrico.
         */
        $total_scrap_cost = $this->model_pdca_area->getTotalScrapCostMonthlyByYear($selected_year);
        $weekly_scrap_cost = $this->model_pdca_area->getTotalScrapCostWeeklyByYear($selected_year);
        $binders_tbl_monthly = array();
        $binders_weekly_graph = array();

        $captured_months = count($total_scrap_cost);

        // Monthly Investments...

        if($captured_months && count($months)) {
            foreach ($months as $key => $month) {

                if (($key + 1) > $captured_months) break;
                if (empty($month)) continue;

                $goal = $this->utilities->get_percentage_val($month, $metric_goal);

                $binders_tbl_monthly[] = array(
                    'month' => $month_names[$key],
                    'inversion' => $month,
                    'goal' => $this->utilities->reduce_decimal($goal),
                    'actual_scrap' => $this->utilities->reduce_decimal($total_scrap_cost[$key]->net_amt),
                    'gap' => $this->utilities->reduce_decimal($goal - $total_scrap_cost[$key]->net_amt),
                    'actual_perc' => $this->utilities->reduce_decimal(
                        $this->utilities->get_percentage($month, $total_scrap_cost[$key]->net_amt)
                    )
                );
            }
        }

        if(!empty($weekly_scrap_cost) && count($weekly_scrap_cost)){
            foreach($weekly_scrap_cost as $key => $week_scrap){
                $binders_weekly_graph[] = array(
                    'perc' =>
                        number_format($this->utilities->get_percentage($area_inversion, $week_scrap->net_amt), 2, '.', '')
                );
            }
        }

        /*
         * Paso 3. Análisis de Causa - Pareto de 1er Nivel.
         */

        $total_sa_scrap = $this->model_pdca_subarea->getTotalScrapCostByMonthlyRange(
            $selected_year, $start_month, $end_month);
        $sa_scrap_count = count($total_sa_scrap);

        $sa_scraps = array();
        $a_scraps = array();
        $sa_scrap_total = 0;

        $minor_sa_scrap = $total_sa_scrap[$sa_scrap_count - 1];

        // Add Sub Areas
        if(!empty($total_sa_scrap) && $sa_scrap_count){
            foreach($total_sa_scrap as $key => $sa_scrap){
                foreach($sub_area_inversion as $sa_inv_key => $sa_inv)
                {
                    if($sa_inv_key == $sa_scrap->id){
                        $sa_scraps[] = array(
                            'sa_id' => $sa_scrap->id,
                            'sa_name' => $sa_scrap->name,
                            'scrap_qty' =>  $this->utilities->reduce_decimal($sa_scrap->net_amt),
                            'perc' =>
                                number_format($this->utilities->get_percentage($sa_inv, $sa_scrap->net_amt), 2, '.', '')
                        );

                        $sa_scrap_total += $sa_scrap->net_amt;
                        break;
                    }
                }
            }
        }

        $sa_scraps_process = array();

        // Add from area
        if(count($sa_scraps)){

            // Order SubArea percentages

            $this->utilities->array_sort_by_column($sa_scraps, 'perc', SORT_DESC);

            $a_scraps = array(
                'sa_id' => 1,
                'sa_name' => 'Binders',
                'scrap_qty' =>  $this->utilities->reduce_decimal($sa_scrap_total),
                'perc' =>
                    number_format(
                        $this->utilities->get_percentage($area_inversion, $sa_scrap_total)
                        , 2, '.', '')
            );

            $sa_scraps_process = $sa_scraps;
            $this->utilities->array_sort_by_column($sa_scraps_process, 'scrap_qty', SORT_DESC);

            $sa_scraps[] = $a_scraps;
            $sa_scraps_process[] = $a_scraps;
        }

        // Machine Graphs

        $sa_machine_s = array();
        $sa_machine_scrap = $this->model_pdca_subarea->getMachineScrapByMonthlyRange(
            $selected_year, $start_month, $end_month);

        if(!empty($sa_machine_scrap) && count($sa_machine_scrap)){
            foreach($sa_machine_scrap as $machine_scrap){
                if($machine_scrap->id == 'AG16'){
                    $sa_machine_s["{$machine_scrap->name}"][] = array(
                        'machine' => $machine_scrap->co,
                        'scrap_qty' => $this->utilities->reduce_decimal($machine_scrap->net_amt),
                        'inversion' => $ag16_machines["{$machine_scrap->co}"],
                        'perc' =>
                            number_format(
                                $this->utilities->get_percentage(
                                    $ag16_machines["{$machine_scrap->co}"], $machine_scrap->net_amt
                                ), 2, '.', '')
                    );
                }
                if($machine_scrap->id == 'AG30'){
                    $sa_machine_s["{$machine_scrap->name}"][] = array(
                        'machine' => $machine_scrap->co,
                        'scrap_qty' => $this->utilities->reduce_decimal($machine_scrap->net_amt),
                        'inversion' => $ag30_machines["{$machine_scrap->co}"],
                        'perc' =>
                            number_format(
                                $this->utilities->get_percentage(
                                    $ag30_machines["{$machine_scrap->co}"], $machine_scrap->net_amt
                                ), 2, '.', '')
                    );
                }
            }
        }

        $sa_machine_s_process = array();

        if(!empty($sa_machine_s) && count($sa_machine_s)) {
            $this->utilities->array_sort_by_column($sa_machine_s['Specialties'], 'perc', SORT_DESC);
            $this->utilities->array_sort_by_column($sa_machine_s['Vynil'], 'perc', SORT_DESC);

            if (count($sa_machine_s['Specialties']) > 6) {
                $sa_machine_s['Specialties'] = array_slice($sa_machine_s['Specialties'], 0, 6);
            }
            if (count($sa_machine_s['Vynil']) > 6) {
                $sa_machine_s['Vynil'] = array_slice($sa_machine_s['Vynil'], 0, 6);
            }

            $sa_machine_s_process = $sa_machine_s;

            $this->utilities->array_sort_by_column($sa_machine_s_process['Specialties'], 'scrap_qty', SORT_DESC);
            $this->utilities->array_sort_by_column($sa_machine_s_process['Vynil'], 'scrap_qty', SORT_DESC);
        }

        // Code Graphs order by less scrap SubArea.

        $data_qry = array(
            'year' => $selected_year,
            'start_month' => $start_month,
            'end_month' => $end_month,
            'sa_id' => (!empty($minor_sa_scrap))? $minor_sa_scrap->id : 0
        );

        $sa_code_scrap_dm = $this->model_pdca_subarea->getCodeScrapByMonthlyRange($data_qry);
        $sa_code_scrap = array();

        if(!empty($sa_code_scrap_dm) && count($sa_code_scrap_dm)){
            foreach($sa_code_scrap_dm as $value) {
                $sa_code_scrap[] = array(
                    'code' => $value->reason,
                    'scrap_qty' => $value->net_amt,
                    'sa_name' => $value->name,
                    'perc' =>
                        number_format(
                            $this->utilities->get_percentage($minor_sa_scrap->net_amt, $value->net_amt)
                            , 2, '.', '')

                );
            }
        }

        // Graph less 4 machines order by code of a SubArea

        $sa_m_count = 0;
        $minor_sa_m_scrap_reason = array();

        if(!empty($sa_machine_s) && count($sa_machine_s)) {
            foreach($sa_machine_s["{$minor_sa_scrap->name}"] as $sa_machine){

                if($sa_m_count == 4)
                    break;

                $data_qry = array(
                    'year' => $selected_year,
                    'start_month' => $start_month,
                    'end_month' => $end_month,
                    'co' => $sa_machine['machine'],
                    'sa_id' => $minor_sa_scrap->id
                );

                $sa_m_scrap_reason = $this->model_pdca_subarea->getReasonScrapBySaAndMachine($data_qry);

                if(!empty($sa_m_scrap_reason) && count($sa_m_scrap_reason)){
                    foreach($sa_m_scrap_reason as $key => $scrap_reason){

                        if($key == 6)
                            break;

                        $minor_sa_m_scrap_reason["{$sa_machine['machine']}"][] = array (
                            'reason' => $scrap_reason->reason,
                            'net_amt' => $this->utilities->reduce_decimal($scrap_reason->net_amt),
                            'perc' =>
                                number_format(
                                    $this->utilities->get_percentage($sa_machine['scrap_qty'], $scrap_reason->net_amt)
                                    , 2, '.', '')
                        );
                    }
                }


                $this->utilities->array_sort_by_column($minor_sa_m_scrap_reason["{$sa_machine['machine']}"], 'net_amt', SORT_DESC);
                $sa_m_count++;
            }
        }

        if(!empty($sa_code_scrap) && count($sa_code_scrap))
            $this->utilities->array_sort_by_column($sa_code_scrap, 'scrap_qty', SORT_DESC);

        $data = array (
            'area_monthly_scrap' => $binders_tbl_monthly,
            'area_year_scrap' => $binders_weekly_graph,
            'sa_scraps' => $sa_scraps,
            'sa_scraps_process' => $sa_scraps_process,
            'sa_machine_scrap' => $sa_machine_s,
            'sa_machine_scrap_process' => $sa_machine_s_process,
            'sa_code_scrap' => $sa_code_scrap,
            'sa_m_scrap_reason' => $minor_sa_m_scrap_reason,
            'a_scraps' => $a_scraps,
            'metric_goal' => $metric_goal,
            'months' =>  $month_names,
            'less_sa_name' => (!empty($minor_sa_scrap))? $minor_sa_scrap->name : '',
            'area_name' => 'Binders',
            'problem_def' => $problem_def,
            'study_reach' => $study_reach,
            'selected_year' => $selected_year,
            'start_month' => $start_month,
            'end_month' => $end_month,
            'date_selected' => $date_selected,
            'members' => $members,
            'actual' => $actual,
            'ytd' => $ytd,
        );

        $this->layout->title('Avery - SCRAP Graph Report');
        $this->layout->view('scrap/report_view', $data);
    }

    /**
     * Post controller function to upload file process.
     */
    public function do_upload()
    {
        $config['upload_path'] = './uploads/';
        $config['allowed_types'] = 'csv';
        $config['max_size']	= '10240';

        $this->load->library('upload', $config);

        if ( ! $this->upload->do_upload())
        {
            $error = array('error' => $this->upload->display_errors());
            $this->layout->view('scrap/scrap_import_view', $error);
        }
        else
        {
            $data = array('upload_data' => $this->upload->data());

            $this->upload_file = $data['upload_data']['full_path'];
            $this->readCsv();
        }
    }

    /**
     * Read CSV file internal function
     */
    private function readCsv()
    {
        $this->load->library('csvreader');

        $csv_data = $this->csvreader->parse_file($this->upload_file);
        $this->model_pdca_scrap->insert_batch($csv_data);

        $data['scrap_count'] = count($csv_data);

        $this->layout->view('scrap/scrap_upload_success_view', $data);
    }
}